// <auto-generated />
using System;
using CafeteriaRecommendationSystem.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CafeteriaRecommendationSystem.DAL.Migrations
{
    [DbContext(typeof(CafeDbContext))]
    [Migration("20240618113651_initialCreate")]
    partial class initialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.AvailabilityStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("AvailabilityStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Available"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Unavailable"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "PermanentlyDeleted"
                        });
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int")
                        .HasColumnName("MenuItemID");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailabilityStatusId")
                        .HasColumnType("int")
                        .HasColumnName("AvailabilityStatusID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("TypeID");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityStatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.MenuItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("MenuItemTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Lunch"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "Dinner"
                        });
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateRecommended")
                        .HasColumnType("date");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int")
                        .HasColumnName("MenuItemID");

                    b.Property<decimal>("RecommendationScore")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Chef"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "Employee"
                        });
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.Selection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int")
                        .HasColumnName("MenuItemID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Selections");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@email.com",
                            EmployeeId = "ITTV/EMP/0000",
                            Name = "admin",
                            Password = "Password@1",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.Feedback", b =>
                {
                    b.HasOne("CafeteriaRecommendationSystem.DAL.Models.MenuItem", "MenuItem")
                        .WithMany("Feedbacks")
                        .HasForeignKey("MenuItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_MenuItems");

                    b.HasOne("CafeteriaRecommendationSystem.DAL.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Users");

                    b.Navigation("MenuItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.MenuItem", b =>
                {
                    b.HasOne("CafeteriaRecommendationSystem.DAL.Models.AvailabilityStatus", "AvailabilityStatus")
                        .WithMany("MenuItems")
                        .HasForeignKey("AvailabilityStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_MenuItems_AvailabilityStatus");

                    b.HasOne("CafeteriaRecommendationSystem.DAL.Models.MenuItemType", "Type")
                        .WithMany("MenuItems")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_MenuItems_MenuItemTypes");

                    b.Navigation("AvailabilityStatus");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.Notification", b =>
                {
                    b.HasOne("CafeteriaRecommendationSystem.DAL.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.Recommendation", b =>
                {
                    b.HasOne("CafeteriaRecommendationSystem.DAL.Models.MenuItem", "MenuItem")
                        .WithMany("Recommendations")
                        .HasForeignKey("MenuItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Recommendations_MenuItems");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.Selection", b =>
                {
                    b.HasOne("CafeteriaRecommendationSystem.DAL.Models.MenuItem", "MenuItem")
                        .WithMany("Selections")
                        .HasForeignKey("MenuItemId")
                        .IsRequired()
                        .HasConstraintName("FK_Selections_MenuItems");

                    b.HasOne("CafeteriaRecommendationSystem.DAL.Models.User", "User")
                        .WithMany("Selections")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Selections_Users");

                    b.Navigation("MenuItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.User", b =>
                {
                    b.HasOne("CafeteriaRecommendationSystem.DAL.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.AvailabilityStatus", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.MenuItem", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Recommendations");

                    b.Navigation("Selections");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.MenuItemType", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CafeteriaRecommendationSystem.DAL.Models.User", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Selections");
                });
#pragma warning restore 612, 618
        }
    }
}
